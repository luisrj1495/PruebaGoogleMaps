{
  "_from": "react-places-autocomplete",
  "_id": "react-places-autocomplete@6.1.3",
  "_inBundle": false,
  "_integrity": "sha512-Ld8Ny1GnWa20yxrjw4IwTe2XfB1FFUZt1gMHukh/dQU61kzjdS0/rd3SycyWe34MKIPfQUHM33lcbLu2mZ7AyA==",
  "_location": "/react-places-autocomplete",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-places-autocomplete",
    "fetchSpec": "latest",
    "name": "react-places-autocomplete",
    "raw": "react-places-autocomplete",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-places-autocomplete/-/react-places-autocomplete-6.1.3.tgz",
  "_shasum": "1d67da64afaafa639a7695fe2f5cbbd666b610c1",
  "_shrinkwrap": null,
  "_spec": "react-places-autocomplete",
  "_where": "/home/luisrj1495/Documents/DocumentosGitHUb/CursoReact/prueba-google-maps",
  "author": {
    "email": "ken.hibino7@gmail.com",
    "name": "Ken Hibino",
    "url": "http://www.kenhibino.com/"
  },
  "babel": {
    "presets": [
      "es2015",
      "react",
      "stage-2"
    ]
  },
  "bugs": {
    "url": "https://github.com/kenny-hibino/react-places-autocomplete/issues"
  },
  "bundleDependencies": false,
  "config": {
    "commitizen": {
      "path": "node_modules/cz-conventional-changelog"
    },
    "ghooks": {
      "pre-commit": "npm run test"
    }
  },
  "dependencies": {
    "lodash.debounce": "^4.0.8",
    "prop-types": "^15.5.8"
  },
  "deprecated": false,
  "description": "A React component for Google Maps Places Autocomplete",
  "devDependencies": {
    "babel-cli": "^6.23.0",
    "babel-loader": "^6.3.2",
    "babel-plugin-react-transform": "^2.0.2",
    "babel-plugin-transform-class-properties": "^6.24.1",
    "babel-plugin-transform-react-remove-prop-types": "^0.3.2",
    "babel-preset-es2015": "^6.22.0",
    "babel-preset-react": "^6.23.1",
    "babel-preset-stage-0": "^6.22.0",
    "babel-register": "^6.23.0",
    "chai": "3.5.0",
    "chai-enzyme": "0.5.0",
    "commitizen": "2.8.2",
    "copy-webpack-plugin": "^4.0.1",
    "cz-conventional-changelog": "1.1.6",
    "enzyme": "2.4.1",
    "file-loader": "0.11.2",
    "gh-pages": "^0.12.0",
    "ghooks": "1.3.2",
    "image-webpack-loader": "3.3.1",
    "jsdom": "9.4.1",
    "json-loader": "0.5.4",
    "mocha": "2.5.3",
    "npm-run-all": "2.3.0",
    "nyc": "7.0.0",
    "prettier": "1.10.2",
    "react": "^15.6.1",
    "react-addons-test-utils": "^15.6.0",
    "react-dom": "^15.6.1",
    "rimraf": "2.5.3",
    "semantic-release": "^4.3.5",
    "sinon": "1.17.4",
    "webpack": "^1.14.0",
    "webpack-dev-server": "^1.16.2"
  },
  "files": [
    "README.md",
    "dist"
  ],
  "homepage": "https://github.com/kenny-hibino/react-places-autocomplete#readme",
  "keywords": [
    "React",
    "React.js",
    "autocomplete",
    "geocode",
    "geocoder",
    "google",
    "google-map",
    "google-maps",
    "latitude",
    "longitude",
    "maps",
    "place",
    "places",
    "places-autocomplete",
    "react-component"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "react-places-autocomplete",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=0.14.7"
  },
  "readme": "[![travis build](https://img.shields.io/travis/kenny-hibino/react-places-autocomplete.svg?style=flat-square)](https://travis-ci.org/kenny-hibino/react-places-autocomplete)\r\n[![MIT-License](https://img.shields.io/npm/l/react-places-autocomplete.svg?style=flat-square)]()\r\n[![Gitter](https://img.shields.io/gitter/room/nwjs/nw.js.svg?style=flat-square)](https://gitter.im/react-places-autocomplete/Lobby)\r\n[![Open Source Helpers](https://www.codetriage.com/kenny-hibino/react-places-autocomplete/badges/users.svg)](https://www.codetriage.com/kenny-hibino/react-places-autocomplete)\n\r\n\r\n# React Places Autocomplete\r\n\r\nA React component to build a customized UI for Google Maps Places Autocomplete\r\n\r\n\r\n### Demo\r\nLive demo: [kenny-hibino.github.io/react-places-autocomplete/](https://kenny-hibino.github.io/react-places-autocomplete/)\r\n\r\n\r\n### Features\r\n1. Enable you to easily build a customized autocomplete dropdown powered by [Google Maps Places Library](https://developers.google.com/maps/documentation/javascript/places)\r\n2. [Utility functions](#utility-functions) to geocode and get latitude and longitude using [Google Maps Geocoder API](https://developers.google.com/maps/documentation/javascript/geocoding)\r\n3. Pass through arbitrary props to the input element to integrate well with other libraries (e.g. Redux-Form)  \r\n4. Mobile friendly UX\r\n5. WAI-ARIA compliant\r\n\r\n### Installation\r\nTo install the stable version\r\n\r\n```sh\r\nyarn add react-places-autocomplete\r\n```\r\n\r\nor\r\n\r\n```sh\r\nnpm install react-places-autocomplete --save\r\n```\r\n\r\nReact component is exported as a default export\r\n\r\n```js\r\nimport PlacesAutocomplete from 'react-places-autocomplete'\r\n```\r\n\r\n`geocodeByAddress` and `geocodeByPlaceId` utility functions are named exports\r\n\r\n```js\r\nimport { geocodeByAddress, geocodeByPlaceId } from 'react-places-autocomplete'\r\n```\r\n\r\n\r\n### Getting Started\r\n<a name=\"load-google-library\"></a>\r\nTo use this component, you are going to need to load [Google Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/)\r\n\r\nLoad the library in your project\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\"></script>\r\n```\r\n\r\nCreate your component\r\n\r\n```js\r\nimport React from 'react'\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete'\r\n\r\nclass SimpleForm extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { address: 'San Francisco, CA' }\r\n    this.onChange = (address) => this.setState({ address })\r\n  }\r\n\r\n  handleFormSubmit = (event) => {\r\n    event.preventDefault()\r\n\r\n    geocodeByAddress(this.state.address)\r\n      .then(results => getLatLng(results[0]))\r\n      .then(latLng => console.log('Success', latLng))\r\n      .catch(error => console.error('Error', error))\r\n  }\r\n\r\n  render() {\r\n    const inputProps = {\r\n      value: this.state.address,\r\n      onChange: this.onChange,\r\n    }\r\n\r\n    return (\r\n      <form onSubmit={this.handleFormSubmit}>\r\n        <PlacesAutocomplete inputProps={inputProps} />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SimpleForm\r\n```\r\n\r\n## Props\r\n\r\n| Prop        | Type           | Required  | Description |\r\n| ------------- |:-------------:| :-----: |-------|\r\n| [`inputProps`](#inputProps) | object | :white_check_mark: | Arbitrary props to input element, `value` and `onChange` are required keys |\r\n| [`renderSuggestion`](#renderSuggestion) | function |  | Functional react component to render dropdown list item |\r\n| [`renderFooter`](#renderFooter) | function |  | Functional react component to render footer at the bottom of the dropdown list |\r\n| [`classNames`](#classNames) | object | | Pass CSS classes to rendered elements |\r\n| [`styles`](#styles) | object | | Pass CSS styles to rendered elements |\r\n| [`onSelect`](#onSelect) | function | | Event handler to handle user's select event |\r\n| [`onEnterKeyDown`](#onEnterKeyDown) | function || Event handler that gets called when user presses Enter key while input is focused |\r\n| [`onError`](#onError) | function | | Error handler function that gets called when Google Maps API responds with an error |\r\n| [`options`](#options) | object | | Options to Google Maps API  (i.e. bounds, radius) |\r\n|[`debounce`](#debounce) | number | | Number of milliseconds to delay before making a call to Google Maps API |\r\n| [`highlightFirstSuggestion`](#highlightFirstSuggestion) | boolean | | If set to `true`, first list item in the dropdown will be automatically highlighted |\r\n|[`shouldFetchSuggestions`](#shouldFetchSuggestions)| function | | Component will fetch suggestions from Google Maps API only when this function returns `true` |\r\n\r\n<a name=\"inputProps\"></a>\r\n#### inputProps\r\nType: `Object`,\r\nRequired: `true`\r\n\r\nPlacesAutocomplete is a [controlled component](https://facebook.github.io/react/docs/forms.html#controlled-components). Therefore, you MUST pass at least `value` and `onChange` callback to the input element.\r\n\r\nYou can pass arbitrary props to the input element thorough `inputProps` object (NOTE: `className` and `style` props for the input element should be passed through `classNames.input` and `styles.input` respectively).\r\n\r\n```js\r\n  const inputProps = {\r\n    value,    // `value` is required\r\n    onChange, // `onChange` is required\r\n    onBlur: () => {\r\n      console.log('blur!')\r\n    },\r\n    type: 'search',\r\n    placeholder: 'Search Places...',\r\n    autoFocus: true,\r\n  }\r\n```\r\n\r\n<a name=\"renderSuggestion\"></a>\r\n#### renderSuggestion\r\nType: `Functional React Component`,\r\nRequired: `false`\r\n\r\nThe function takes props with `suggestion`, `formattedSuggestion` keys (see the example below).\r\nWe highly recommend that you create your own custom list item component and pass it as a prop.\r\n\r\n```js\r\n/***********************************************\r\n Example #1\r\n List item example with `suggestion`\r\n************************************************/\r\nrender() {\r\n  const renderSuggestion = ({ suggestion }) => (<div><i className=\"fa fa-map-marker\"/>{suggestion}</div>)\r\n\r\n  return (\r\n    <PlacesAutocomplete\r\n      inputProps={inputProps}\r\n      renderSuggestion={renderSuggestion}\r\n    />\r\n  )\r\n}\r\n\r\n/***************************************************\r\n Example #2\r\n List item example with `formattedSuggestion`\r\n****************************************************/\r\nrender() {\r\n  const renderSuggestion = ({ formattedSuggestion }) => (\r\n    <div>\r\n      <strong>{ formattedSuggestion.mainText }</strong>{' '}\r\n      <small>{ formattedSuggestion.secondaryText }</small>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <PlacesAutocomplete\r\n      inputProps={inputProps}\r\n      renderSuggestion={renderSuggestion}\r\n    />\r\n  )\r\n}\r\n```\r\n\r\n<a name=\"renderFooter\"></a>\r\n#### renderFooter\r\nType: `Functional React Component`\r\nRequired: `false`\r\n\r\nYou can provide a component that will get rendered at the bottom of dropdown.\r\nFor example, you can provide a component to show \"Powered by Google\" logo.\r\n\r\n```js\r\nconst renderFooter = () => (\r\n  <div className=\"dropdown-footer\">\r\n    <div>\r\n      <img src={require('./images/google-logo.png')} />\r\n    </div>\r\n  </div>\r\n)\r\n\r\n// In render function\r\n<PlacesAutocomplete\r\n  inputProps={inputProps}\r\n  renderFooter={renderFooter}\r\n/>\r\n```\r\n\r\n<a name=\"classNames\"></a>\r\n#### classNames\r\nType: `Object`,\r\nRequired: `false`\r\n\r\nYou can give a custom css classes to elements.\r\nAccepted keys are `root`, `input`, `autocompleteContainer`, `autocompleteItem`, `autocompleteItemActive`.\r\nIf you pass `classNames` props, none of the default inline styles nor inline styles from `styles` prop will\r\nbe applied to the element, and you will have full control over styling via CSS.\r\n\r\n```js\r\n// classNames example\r\nrender() {\r\n  const cssClasses = {\r\n    root: 'form-group',\r\n    input: 'form-control',\r\n    autocompleteContainer: 'my-autocomplete-container'\r\n  }\r\n\r\n  return (\r\n    <PlacesAutocomplete\r\n      inputProps={inputProps}\r\n      classNames={cssClasses}\r\n    />\r\n  )\r\n}\r\n```\r\nNow you can easily apply custom CSS styles using the classNames!\r\n\r\n<a name=\"styles\"></a>\r\n#### styles\r\nType `Object`,\r\nRequired: `false`\r\n\r\nYou can provide custom inline styles to elements.\r\nAccepted keys are `root`, `input`, `autocompleteContainer`, `autocompleteItem`, `autocompleteItemActive`.\r\n\r\n```js\r\nconst defaultStyles = {\r\n  root: {\r\n    position: 'relative',\r\n    paddingBottom: '0px',\r\n  },\r\n  input: {\r\n    display: 'inline-block',\r\n    width: '100%',\r\n    padding: '10px',\r\n  },\r\n  autocompleteContainer: {\r\n    position: 'absolute',\r\n    top: '100%',\r\n    backgroundColor: 'white',\r\n    border: '1px solid #555555',\r\n    width: '100%',\r\n  },\r\n  autocompleteItem: {\r\n    backgroundColor: '#ffffff',\r\n    padding: '10px',\r\n    color: '#555555',\r\n    cursor: 'pointer',\r\n  },\r\n  autocompleteItemActive: {\r\n    backgroundColor: '#fafafa'\r\n  },\r\n}\r\n```\r\n\r\nObject passed via `styles` prop will be merged in with the above defaults and applied to their respective elements.\r\nNOTE: Passing `classNames` will disable any inline styling for respective elements.\r\n\r\n```js\r\n// custom style examples\r\nrender() {\r\n  const myStyles = {\r\n    root: { position: 'absolute' },\r\n    input: { width: '100%' },\r\n    autocompleteContainer: { backgroundColor: 'green' },\r\n    autocompleteItem: { color: 'black' },\r\n    autocompleteItemActive: { color: 'blue' }\r\n  }\r\n\r\n  return (\r\n    <PlacesAutocomplete\r\n      inputProps={inputProps}\r\n      styles={myStyles}\r\n    />\r\n  )\r\n}\r\n```\r\n\r\n<a name=\"onSelect\"></a>\r\n#### onSelect\r\nType: `Function`\r\nRequired: `false`,\r\nDefault: `null`\r\n\r\nYou can pass a function that gets called instead of `onChange` function when user\r\nhits the Enter key or clicks on an autocomplete item.\r\n\r\nThe function takes two positional arguments. First argument is `address`, second is `placeId`.\r\n\r\n```js\r\nconst handleSelect = (address, placeId) => {\r\n  this.setState({ address, placeId })\r\n\r\n  // You can do other things with address string or placeId. For example, geocode :)\r\n}\r\n\r\n// Pass this function via onSelect prop.\r\n<PlacesAutocomplete\r\n  inputProps={inputProps}\r\n  onSelect={this.handleSelect}\r\n/>\r\n```\r\n\r\n<a name=\"onEnterKeyDown\"></a>\r\n#### onEnterKeyDown\r\nType: `Function`\r\nRequired: `false`\r\nDeafult: `noop`\r\n\r\nYou can pass a callback function that gets called when pressing down Enter key when no item in the dropdown is selected.\r\nThe function takes one argument, the value in the input field.\r\n\r\n```js\r\nconst handleEnter = (address) => {\r\n  geocodeByAddress(address)\r\n    .then(results => {\r\n      console.log('results', results)\r\n    })\r\n}\r\n\r\n// Pass this function via onEnterKeyDown prop.\r\n<PlacesAutocomplete\r\n  inputProps={inputProps}\r\n  onEnterKeyDown={this.handleEnter}\r\n/>\r\n```\r\n\r\n<a name=\"onError\"></a>\r\n#### onError\r\nType: `Function`\r\nRequired: `false`\r\n\r\nYou can pass `onError` prop to customize the behavior when [google.maps.places.PlacesServiceStatus](https://developers.google.com/maps/documentation/javascript/places#place_details_responses) is not `OK` (e.g., no predictions are found)\r\n\r\nFunction takes `status` (string) and `clearSuggestions` (function) as parameters\r\n\r\n```js\r\n// Log error status and clear dropdown when Google Maps API returns an error.\r\nconst onError = (status, clearSuggestions) => {\r\n  console.log('Google Maps API returned error with status: ', status)\r\n  clearSuggestions()\r\n}\r\n\r\n// In render function\r\n<PlacesAutocomplete\r\n  inputProps={inputProps}\r\n  onError={onError}\r\n/>\r\n```\r\n\r\n\r\n<a name=\"options\"></a>\r\n#### options\r\nType: `Object`\r\nRequired: `false`\r\nDefault: `{}`\r\n\r\nYou can fine-tune the settings passed to the AutocompleteService class with `options` prop.\r\nThis prop accepts an object following the same format as [google.maps.places.AutocompletionRequest](https://developers.google.com/maps/documentation/javascript/reference#AutocompletionRequest)\r\n(except for `input`, which comes from the value of the input field).\r\n\r\n```js\r\n// these options will bias the autocomplete predictions toward Sydney, Australia with a radius of 2000 meters,\r\n// and limit the results to addresses only\r\nconst options = {\r\n  location: new google.maps.LatLng(-34, 151),\r\n  radius: 2000,\r\n  types: ['address']\r\n}\r\n\r\n// In render function\r\n<PlacesAutocomplete\r\n  inputProps={inputProps}\r\n  options={options}\r\n/>\r\n```\r\n\r\n<a name=\"debounce\"></a>\r\n#### debounce\r\nType: `Number`\r\nRequired: `false`\r\nDefault: `200`\r\n\r\nThe number of milliseconds to delay before making a call to Google Maps API.\r\n\r\n<a name=\"highlightFirstSuggestion\"></a>\r\n#### highlightFirstSuggestion\r\nType: `Boolean`\r\nRequired: `false`\r\nDefault: `false`\r\n\r\nIf set to `true`, first suggestion in the dropdown will be automatically highlighted.\r\n\r\n<a name=\"shouldFetchSuggestions\"></a>\r\n#### shouldFetchSuggestions\r\nType: `Function`\r\nRequired: `false`\r\nDefault: `() => true`\r\n\r\nYou can pass a function to tell when to fetch suggestions from Google Maps API.\r\nIt takes an input `{ value }` and should return a boolean.\r\n\r\n```js\r\n// Only fetch suggestions when the input text is longer than 3 characters.\r\nconst shouldFetchSuggestions = ({ value }) => value.length > 3\r\n\r\n// In render function\r\n<PlacesAutocomplete\r\n  inputProps={inputProps}\r\n  shouldFetchSuggestions={shouldFetchSuggestions}\r\n/>\r\n```\r\n\r\n<a name=\"utility-functions\"></a>\r\n## Utility Functions\r\n* [`geocodeByAddress`](#geocode-by-address)\r\n* [`geocodeByPlaceId`](#geocode-by-place-id)\r\n* [`getLatLng`](#get-lat-lng)\r\n\r\n<a name=\"geocode-by-address\"></a>\r\n### `geocodeByAddress` API\r\n\r\n```js\r\n/**\r\n * Returns a promise\r\n * @param {String} address\r\n * @return {Promise}\r\n*/\r\ngeocodeByAddress(address)\r\n```\r\n\r\n#### address\r\nType: `String`,\r\nRequired: `true`\r\n\r\nString that gets passed to Google Maps [Geocoder](https://developers.google.com/maps/documentation/javascript/geocoding)\r\n\r\n```js\r\nimport { geocodeByAddress } from 'react-places-autocomplete'\r\n\r\n// `results` is an entire payload from Google API.\r\ngeocodeByAddress('Los Angeles, CA')\r\n  .then(results => console.log(results))\r\n  .catch(error => console.error(error))\r\n```\r\n\r\n<a name=\"geocode-by-place-id\"></a>\r\n### `geocodeByPlaceId` API\r\n\r\n```js\r\n/**\r\n * Returns a promise\r\n * @param {String} placeId\r\n * @return {Promise}\r\n*/\r\ngeocodeByPlaceId(placeId)\r\n```\r\n\r\n#### placeId\r\nType: `String`,\r\nRequired: `true`\r\n\r\nString that gets passed to Google Maps [Geocoder](https://developers.google.com/maps/documentation/javascript/geocoding)\r\n\r\n\r\n```js\r\nimport { geocodeByPlaceId } from 'react-places-autocomplete'\r\n\r\n// `results` is an entire payload from Google API.\r\ngeocodeByPlaceId('ChIJE9on3F3HwoAR9AhGJW_fL-I')\r\n  .then(results => console.log(results))\r\n  .catch(error => console.error(error))\r\n```\r\n<a name=\"get-lat-lng\"></a>\r\n### `getLatLng` API\r\n\r\n```js\r\n/**\r\n * Returns a promise\r\n * @param {Object} result\r\n * @return {Promise}\r\n*/\r\ngetLatLng(result)\r\n```\r\n\r\n#### result\r\nType: `Object`\r\nRequired: `true`\r\n\r\nOne of the element from `results` (returned from Google Maps Geocoder)\r\n\r\n```js\r\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete'\r\n\r\ngeocodeByAddress('Tokyo, Japan')\r\n  .then(results => getLatLng(results[0]))\r\n  .then(({ lat, lng }) => console.log('Successfully got latitude and longitude', { lat, lng }))\r\n```\r\n\r\n### Discussion\r\n\r\nJoin us on [Gitter](https://gitter.im/react-places-autocomplete/Lobby) if you are interested in contributing!\r\n\r\n### License\r\n\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kenny-hibino/react-places-autocomplete.git"
  },
  "scripts": {
    "build": "npm-run-all --parallel build:*",
    "build:main": "babel --copy-files --out-dir dist --ignore *.spec.js src",
    "build:umd": "webpack --output-filename index.umd.js",
    "build:umd.min": "webpack --output-filename index.umd.min.js -p",
    "commit": "git-cz",
    "demo": "webpack-dev-server --config demo/webpack.config.js --debug --content-base demo --inline --hot --colors",
    "demo:build": "rimraf demo/dist && webpack --config demo/webpack.config.js -p",
    "demo:deploy": "gh-pages -d demo/dist",
    "demo:test": "mocha demo/tests/index.spec.js --compilers js:babel-register",
    "postpublish": "npm run demo:deploy",
    "prebuild": "rimraf dist",
    "prettier": "prettier --no-semi --single-quote --trailing-comma es5 --arrow-parens avoid  --write \"src/**/*.js\" \"demo/**/*.js\"",
    "semantic-release": "semantic-release pre && npm publish && semantic-release post",
    "test": "mocha src/tests/setup.js src/tests/index.spec.js",
    "watch:test": "npm t -- -w"
  },
  "version": "6.1.3"
}
